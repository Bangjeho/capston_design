package kr.ac.sunmoon.client.page;

import java.util.ArrayList;

import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.Style.Unit;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.DecoratorPanel;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.PushButton;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;

import kr.ac.sunmoon.client.Service;
import kr.ac.sunmoon.client.ServiceAsync;
import kr.ac.sunmoon.shared.Location;
import kr.ac.sunmoon.shared.RoomInfo;

public class AirBnB_host extends VerticalPanel{
	 private native void initMapFromGWT(double[][] paramGeos, String[] group,
			 int[] price, int[] minstay, int[] accomodate, String[] roomtype)
	   /*-{
	      $wnd.initMap(paramGeos, group, price, minstay, accomodate,roomtype);
	   }-*/;
	
	public AirBnB_host(){
		super();
	}
	{
		VerticalPanel vp = new VerticalPanel();
		RootPanel.get("main").add(vp);
		Image imgAirBnB = new Image();
		imgAirBnB.setUrl("image/airbnb.png");
		imgAirBnB.setWidth("128px");
		vp.add(imgAirBnB);
		
//		RootPanel.getBodyElement().getStyle().setBackgroundImage("url('image/BackgroundImage.jpg')");
		
		HTML htmlLine = new HTML("<hr width=\"100%\" height=\"1px\" color=\"#767676\">");
		htmlLine.getElement().getStyle().setMarginTop(-10, Unit.PX);
		RootPanel.get("main").add(htmlLine);
		
		DecoratorPanel dp = new DecoratorPanel();
		RootPanel.get("main").add(dp);
//		dp.getElement().getStyle().setMarginTop(80, Unit.PX);
		
		Grid grid = new Grid(6, 41);
		dp.add(grid);
		
//		label layer
		Label roomType = new Label("방 타입: ");
		roomType.getElement().getStyle().setFontSize(0.5, Unit.CM);
//		roomType.getElement().getStyle().setMarginTop(100, Unit.PX);
		grid.setWidget(0, 18, roomType);
		
		Label Bedrooms = new Label("침대 수: ");
		Bedrooms.getElement().getStyle().setFontSize(0.5, Unit.CM);
		Bedrooms.getElement().getStyle().setMarginTop(20, Unit.PX);
		grid.setWidget(1, 18, Bedrooms);
		
		Label Bathrooms = new Label("화장실 수: ");
		Bathrooms.getElement().getStyle().setFontSize(0.5, Unit.CM);
		Bathrooms.getElement().getStyle().setMarginTop(20, Unit.PX);
		grid.setWidget(2, 18, Bathrooms);
		
		Label Accommodates = new Label("수용인원: ");
		Accommodates.getElement().getStyle().setFontSize(0.5, Unit.CM);
		Accommodates.getElement().getStyle().setMarginTop(20, Unit.PX);
		grid.setWidget(3, 18, Accommodates);
		
		Label Minstay = new Label("최소숙박: ");
		Minstay.getElement().getStyle().setFontSize(0.5, Unit.CM);
		Minstay.getElement().getStyle().setMarginTop(20, Unit.PX);
		grid.setWidget(4, 18, Minstay);	
		
//		input layer
		final ListBox roomlist = new ListBox();
		roomlist.setHeight("30px");
		roomlist.addItem("집 전체");
		roomlist.addItem("개인실");
		roomlist.addItem("공유실");
		grid.setWidget(0, 19, roomlist);
		
		final TextBox txtbedroom = new TextBox();
		txtbedroom.getElement().getStyle().setMarginTop(20, Unit.PX);
		txtbedroom.setWidth("57px");
		grid.setWidget(1, 19, txtbedroom);
		
		final TextBox txtbathroom = new TextBox();
		txtbathroom.getElement().getStyle().setMarginTop(20, Unit.PX);
		txtbathroom.setWidth("57px");
		grid.setWidget(2, 19, txtbathroom);
		
		final TextBox txtacc = new TextBox();
		txtacc.getElement().getStyle().setMarginTop(20, Unit.PX);
		txtacc.setWidth("57px");
		grid.setWidget(3, 19, txtacc);
		
		final TextBox txtminstay = new TextBox();
		txtminstay.getElement().getStyle().setMarginTop(20, Unit.PX);
		txtminstay.setWidth("57px");
		grid.setWidget(4, 19, txtminstay);
		
//		number of etc
		Label num_of_room = new Label("개");
		num_of_room.getElement().getStyle().setMarginTop(20, Unit.PX);
		num_of_room.getElement().getStyle().setMarginLeft(5, Unit.PX);
		num_of_room.getElement().getStyle().setFontSize(0.5, Unit.CM);
		grid.setWidget(1, 20, num_of_room);
		
		Label num_of_room2 = new Label("개");
		num_of_room2.getElement().getStyle().setMarginTop(20, Unit.PX);
		num_of_room2.getElement().getStyle().setMarginLeft(5, Unit.PX);
		num_of_room2.getElement().getStyle().setFontSize(0.5, Unit.CM);
		grid.setWidget(2, 20, num_of_room2);
		
		Label num_of_day = new Label("일");
		num_of_day.getElement().getStyle().setMarginTop(20, Unit.PX);
		num_of_day.getElement().getStyle().setMarginLeft(5, Unit.PX);
		num_of_day.getElement().getStyle().setFontSize(0.5, Unit.CM);
		grid.setWidget(4, 20, num_of_day);
		
		Label num_of_peo = new Label("명");
		num_of_peo.getElement().getStyle().setMarginTop(20, Unit.PX);
		num_of_peo.getElement().getStyle().setMarginLeft(5, Unit.PX);
		num_of_peo.getElement().getStyle().setFontSize(0.5, Unit.CM);
		grid.setWidget(3,20,num_of_peo);
		
		HTML htmlLine2 = new HTML("<hr width=\"100%\" height=\"1px\" color=\"#767676\">");
		htmlLine2.getElement().getStyle().setMarginTop(10, Unit.PX);
		RootPanel.get("main").add(htmlLine2);
		
		DecoratorPanel dp2 = new DecoratorPanel();
		RootPanel.get("main").add(dp2);

		HorizontalPanel hp = new HorizontalPanel();
		dp2.getElement().getStyle().setMarginTop(10, Unit.PX);
		dp2.add(hp);
		
		Label address = new Label("주소: ");
		address.getElement().getStyle().setFontSize(0.5, Unit.CM);
		hp.add(address);
		
		final TextBox txtAddress = new TextBox();
		txtAddress.getElement().getStyle().setMarginLeft(10, Unit.PX);
		txtAddress.setWidth("400px");
		txtAddress.setHeight("20px");
		hp.add(txtAddress);
		
		Image imgSearch = new Image();
		imgSearch.setUrl("image/search.png");
		imgSearch.setWidth("20px");
		
		PushButton searchButton = new PushButton(imgSearch);
		hp.add(searchButton);
		
		ServiceAsync service = GWT.create(Service.class);
		service.getRoomInfo(new AsyncCallback<ArrayList<RoomInfo>>() {
			
			@Override
			public void onSuccess(ArrayList<RoomInfo> result) {
				// TODO Auto-generated method stub
				String room;
				String[] group = new String[result.size()];
				int[] accomodate = new int[result.size()];
				int[] minstay = new int[result.size()];
				int[] price = new int[result.size()];
				String[] roomtype = new String[result.size()];
				double[][] paramGeos = new double[result.size()][];
				
				for(int i=0; i<paramGeos.length; i++)
				{
					if(result.get(i).isApt()){
						boolean apt = result.get(i).isApt();
						room = String.valueOf(apt);
						room = room.replace(room, "Entire home/apt");
						roomtype[i] = room;
					}
					else if(result.get(i).isPrivate()){
						
						boolean privat = result.get(i).isPrivate();
						room = String.valueOf(privat);
						room = room.replace(room, "Private room");
						roomtype[i] = room;
					}							
					else if(result.get(i).isShared()){
						boolean share = result.get(i).isShared();
						room = String.valueOf(share);
						room = room.replace(room, "Shared room");
						roomtype[i] = room;
					}
					
					accomodate[i] = result.get(i).getAccommodates();
					minstay[i] = result.get(i).getMinstay();
					price[i] = result.get(i).getPrice();
					group[i] = result.get(i).getGroup();
					paramGeos[i] = new double[2];
					paramGeos[i][0] = result.get(i).getLatitude();
					paramGeos[i][1] = result.get(i).getLongitude();
				}
				 initMapFromGWT(paramGeos, group, price, minstay, accomodate, roomtype);
			}
			
			@Override
			public void onFailure(Throwable caught) {
				// TODO Auto-generated method stub
				
			}
			
		});
		searchButton.addClickHandler(new ClickHandler() {
			
			@Override
			public void onClick(ClickEvent event) {
				// TODO Auto-generated method stub
				String apt,privat,share;
				if(roomlist.getSelectedItemText().equals("집 전체")){
					apt = "1";
					privat = "0";
					share = "0";
				}
				else if (roomlist.getSelectedItemText().equals("개인실")){
					apt = "0";
					privat = "1";
					share = "0";
				}
				else{
					apt = "0";
					privat = "0";
					share = "1";
				}
				String countBedroom = txtbedroom.getText();
				String countbathroom = txtbathroom.getText();
				String countAccomodate = txtacc.getText();
				String countMinstay = txtminstay.getText();
				String address = txtAddress.getText();
				
				service.getLocation(apt,privat,share,countBedroom,
						countbathroom,countAccomodate,countMinstay,
						address,new AsyncCallback<ArrayList<Location>>() {
					
					@Override
					public void onSuccess(ArrayList<Location> result) {
						// TODO Auto-generated method stub
						result.get(0).getLat();
						result.get(0).getLng();
						result.get(0).getPredict();
					}
					
					@Override
					public void onFailure(Throwable caught) {
						// TODO Auto-generated method stub
						
					}
				});
			}
		});
		HTML html = new HTML("<div id='map' style ='width :100%;height:500px;'></div>");
		RootPanel.get("main").add(html);
	}
}
